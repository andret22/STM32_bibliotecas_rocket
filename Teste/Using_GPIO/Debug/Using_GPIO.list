
Using_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001648  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001848  08001848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e8  080018e8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080018e8  080018e8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e8  080018e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e8  080018e8  000118e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018ec  080018ec  000118ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080018f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08001954  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001954  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002048  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000089e  00000000  00000000  000220da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00022978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  00022bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f156  00000000  00000000  00022da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c81  00000000  00000000  00041efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9459  00000000  00000000  00044b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edfd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fbc  00000000  00000000  000ee028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08001830 	.word	0x08001830

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08001830 	.word	0x08001830

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <TIM2_IRQHandler>:
    // Usa o NVIC para ativar interrupções globais com o timer
    NVIC_EnableIRQ(TIM2_IRQn);
}

// Handler do timer2
void TIM2_IRQHandler() {
 80002e0:	b4b0      	push	{r4, r5, r7}
 80002e2:	af00      	add	r7, sp, #0

    if (TIM2->SR & TIM_SR_UIF) {
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d019      	beq.n	8000326 <TIM2_IRQHandler+0x46>

        //Limpra a flag de interrupção
        TIM2->SR &= ~TIM_SR_UIF;
 80002f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fc:	f023 0301 	bic.w	r3, r3, #1
 8000300:	6113      	str	r3, [r2, #16]

        //Incrementa o contador em 2
        millis_count++;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <TIM2_IRQHandler+0x50>)
 8000304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000308:	1c54      	adds	r4, r2, #1
 800030a:	f143 0500 	adc.w	r5, r3, #0
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <TIM2_IRQHandler+0x50>)
 8000310:	e9c3 4500 	strd	r4, r5, [r3]
        millis_count++;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <TIM2_IRQHandler+0x50>)
 8000316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800031a:	1c50      	adds	r0, r2, #1
 800031c:	f143 0100 	adc.w	r1, r3, #0
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <TIM2_IRQHandler+0x50>)
 8000322:	e9c3 0100 	strd	r0, r1, [r3]
    }
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bcb0      	pop	{r4, r5, r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000088 	.word	0x20000088

08000334 <delay>:

uint64_t millis() {
    return millis_count;
}

void delay(int time){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = SEC_TICKS;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <delay+0x50>)
 800033e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000342:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <delay+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]

	//Ativa Systick e usa clock interno (alterar caso usar cristal externo)
	SysTick->CTRL = (1U<<0) | (1U<<2);
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <delay+0x50>)
 800034c:	2205      	movs	r2, #5
 800034e:	601a      	str	r2, [r3, #0]

	for(int i=0; i<time ; i++){
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e009      	b.n	800036a <delay+0x36>
		//Aguarda a flag de tick
		while((SysTick->CTRL &  (1U<<16)) == 0){}
 8000356:	bf00      	nop
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <delay+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <delay+0x24>
	for(int i=0; i<time ; i++){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	dbf1      	blt.n	8000356 <delay+0x22>
	}

	//Desativa o Systick
	SysTick->CTRL = 0;
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <delay+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	e000e010 	.word	0xe000e010

08000388 <compute_uart_div>:

/** SERIAL USART3 SETUP ----------------------------------------------------------*/

static uint32_t compute_uart_div(uint32_t perClock, uint32_t baudRate) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
    return perClock / baudRate;
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <uart_set_boudRate>:

static void uart_set_boudRate(USART_TypeDef *usartTx, uint32_t perClock, uint32_t boudRate){
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b084      	sub	sp, #16
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	60f8      	str	r0, [r7, #12]
 80003ae:	60b9      	str	r1, [r7, #8]
 80003b0:	607a      	str	r2, [r7, #4]

	usartTx->BRR = compute_uart_div(perClock, boudRate);
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	68b8      	ldr	r0, [r7, #8]
 80003b6:	f7ff ffe7 	bl	8000388 <compute_uart_div>
 80003ba:	4602      	mov	r2, r0
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <rocketSerialBegin>:
	USART3->CR1 = (1U<<2);
	//Habilitar UART
	USART3->CR1 |= (1U<<0);
}

__attribute__((unused)) static void rocketSerialBegin(uint32_t boudRate){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

	//Pin ---
	//Ativa clock na trilha AHB1 para a porta D
	RCC->AHB1ENR |= (1U<<3);
 80003d0:	4b20      	ldr	r3, [pc, #128]	; (8000454 <rocketSerialBegin+0x8c>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a1f      	ldr	r2, [pc, #124]	; (8000454 <rocketSerialBegin+0x8c>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
	//Settar PD8 para modo de função alternada
	GPIOD->MODER |= (1U<<17);
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <rocketSerialBegin+0x90>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <rocketSerialBegin+0x90>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~ (1U<<16);
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <rocketSerialBegin+0x90>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1a      	ldr	r2, [pc, #104]	; (8000458 <rocketSerialBegin+0x90>)
 80003ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003f2:	6013      	str	r3, [r2, #0]
	//Settar registrador de função alternada para AF7
	GPIOD->AFR[1] |= (1U<<0);
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <rocketSerialBegin+0x90>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <rocketSerialBegin+0x90>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <rocketSerialBegin+0x90>)
 8000402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <rocketSerialBegin+0x90>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <rocketSerialBegin+0x90>)
 800040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000410:	4a11      	ldr	r2, [pc, #68]	; (8000458 <rocketSerialBegin+0x90>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <rocketSerialBegin+0x90>)
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <rocketSerialBegin+0x90>)
 800041e:	f023 0308 	bic.w	r3, r3, #8
 8000422:	6253      	str	r3, [r2, #36]	; 0x24

	//Usart3 ---
	//Ativa clock para USART3
	RCC->APB1ENR |= (1U<<18);
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <rocketSerialBegin+0x8c>)
 8000426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <rocketSerialBegin+0x8c>)
 800042a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800042e:	6413      	str	r3, [r2, #64]	; 0x40
	//Settar boudRate
	uart_set_boudRate(USART3,STD_CLOCK, boudRate);
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	490a      	ldr	r1, [pc, #40]	; (800045c <rocketSerialBegin+0x94>)
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <rocketSerialBegin+0x98>)
 8000436:	f7ff ffb6 	bl	80003a6 <uart_set_boudRate>
	//Direção da transmição
	USART3->CR1 = (1U<<3);
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <rocketSerialBegin+0x98>)
 800043c:	2208      	movs	r2, #8
 800043e:	601a      	str	r2, [r3, #0]
	//Habilitar UART
	USART3->CR1 |= (1U<<0);
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <rocketSerialBegin+0x98>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a06      	ldr	r2, [pc, #24]	; (8000460 <rocketSerialBegin+0x98>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40023800 	.word	0x40023800
 8000458:	40020c00 	.word	0x40020c00
 800045c:	00f42400 	.word	0x00f42400
 8000460:	40004800 	.word	0x40004800

08000464 <usart_3_write>:

/** SERIAL USART3 Write ----------------------------------------------------------*/

__attribute__((unused)) static void usart_3_write(int ch){
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]

	//Se registrador vaziu
	while(!((1u<<7) & USART3->ISR)){}
 800046c:	bf00      	nop
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <usart_3_write+0x2c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <usart_3_write+0xa>

	//Limpa registrador de transmição e substitui por mensagem desejada
	USART3->TDR = (ch & 0xFF);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <usart_3_write+0x2c>)
 800047e:	b2db      	uxtb	r3, r3
 8000480:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40004800 	.word	0x40004800

08000494 <__io_putchar>:
	nBit = printf(data);
	USART3->TDR = ('\r' & 0xFF);
	return nBit++;
}

int __io_putchar(int ch){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	usart_3_write(ch);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ffe1 	bl	8000464 <usart_3_write>
	return ch;
 80004a2:	687b      	ldr	r3, [r7, #4]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <main>:
#include "rocketBasics.h"
#include "rocketI2C.h"
#include "rocketBMP280.h"


int main(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	/* SETUP */
	rocketSerialBegin(9600);
 80004b0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80004b4:	f7ff ff88 	bl	80003c8 <rocketSerialBegin>
	rocketI2C2_init();
 80004b8:	f000 f82a 	bl	8000510 <rocketI2C2_init>
	BMP280_reset();
 80004bc:	f000 f81f 	bl	80004fe <BMP280_reset>
	/*END SETUP*/
	while(1){
		/*LOOP*/
		printf("Ola\n\r");
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <main+0x24>)
 80004c2:	f000 fa27 	bl	8000914 <iprintf>
		delay(500);
 80004c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ca:	f7ff ff33 	bl	8000334 <delay>
		printf("Ola\n\r");
 80004ce:	e7f7      	b.n	80004c0 <main+0x14>
 80004d0:	08001848 	.word	0x08001848

080004d4 <BMP280_write>:
/*** Funções ***/
void BMP280_read_address (uint8_t reg) {
	I2C2_read(BMP280_ADDR, reg, &data);
}

void BMP280_write (uint8_t reg, char value) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]

	char data[1];
	data[0] = value;
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	733b      	strb	r3, [r7, #12]

	I2C2_burstWrite(BMP280_ADDR, reg, data, 1);
 80004e8:	f107 020c 	add.w	r2, r7, #12
 80004ec:	79f9      	ldrb	r1, [r7, #7]
 80004ee:	2301      	movs	r3, #1
 80004f0:	2076      	movs	r0, #118	; 0x76
 80004f2:	f000 f891 	bl	8000618 <I2C2_burstWrite>
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <BMP280_reset>:

void BMP280_readPressure (uint8_t reg) {
	I2C2_burstRead32(BMP280_ADDR, reg,data_rec, 3);
}

void BMP280_reset(){
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
	BMP280_write(RESET_ADDR, RESET_VALUE);
 8000502:	21b6      	movs	r1, #182	; 0xb6
 8000504:	20e0      	movs	r0, #224	; 0xe0
 8000506:	f7ff ffe5 	bl	80004d4 <BMP280_write>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <rocketI2C2_init>:
#include "rocketI2C.h"

void rocketI2C2_init(){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

	//Ativar clock para porta B
	RCC->AHB1ENR |= (1U<<1);
 8000516:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <rocketI2C2_init+0xf8>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a3b      	ldr	r2, [pc, #236]	; (8000608 <rocketI2C2_init+0xf8>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	6313      	str	r3, [r2, #48]	; 0x30

	//Coloca PB10 E PB11 em modo de função alternada
	//PB10
	GPIOB->MODER &=~ (1U<<20);
 8000522:	4b3a      	ldr	r3, [pc, #232]	; (800060c <rocketI2C2_init+0xfc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a39      	ldr	r2, [pc, #228]	; (800060c <rocketI2C2_init+0xfc>)
 8000528:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800052c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<21);
 800052e:	4b37      	ldr	r3, [pc, #220]	; (800060c <rocketI2C2_init+0xfc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a36      	ldr	r2, [pc, #216]	; (800060c <rocketI2C2_init+0xfc>)
 8000534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000538:	6013      	str	r3, [r2, #0]
	//PB11
	GPIOB->MODER &=~ (1U<<22);
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <rocketI2C2_init+0xfc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a33      	ldr	r2, [pc, #204]	; (800060c <rocketI2C2_init+0xfc>)
 8000540:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000544:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<23);
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <rocketI2C2_init+0xfc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a30      	ldr	r2, [pc, #192]	; (800060c <rocketI2C2_init+0xfc>)
 800054c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000550:	6013      	str	r3, [r2, #0]

	//Coloca PB10 e PB11 em I2C
	//PB10
	GPIOB->AFR[1] |= (1U<<10);
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <rocketI2C2_init+0xfc>)
 8000554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000556:	4a2d      	ldr	r2, [pc, #180]	; (800060c <rocketI2C2_init+0xfc>)
 8000558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055c:	6253      	str	r3, [r2, #36]	; 0x24
	//PB11
	GPIOB->AFR[1] |= (1U<<14);
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <rocketI2C2_init+0xfc>)
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <rocketI2C2_init+0xfc>)
 8000564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000568:	6253      	str	r3, [r2, #36]	; 0x24

	//Deixar PB10 E PB11 em modo de dreno aberto
	GPIOB->OTYPER |= (1U<<10);
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <rocketI2C2_init+0xfc>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	4a27      	ldr	r2, [pc, #156]	; (800060c <rocketI2C2_init+0xfc>)
 8000570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000574:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<11);
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <rocketI2C2_init+0xfc>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	4a24      	ldr	r2, [pc, #144]	; (800060c <rocketI2C2_init+0xfc>)
 800057c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000580:	6053      	str	r3, [r2, #4]

	//Colocar PB10 e PB11 em PULL UP
	//PB10
	GPIOB->PUPDR |= (1U<<20);
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <rocketI2C2_init+0xfc>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	4a21      	ldr	r2, [pc, #132]	; (800060c <rocketI2C2_init+0xfc>)
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~ (1U<<21);
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <rocketI2C2_init+0xfc>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4a1e      	ldr	r2, [pc, #120]	; (800060c <rocketI2C2_init+0xfc>)
 8000594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000598:	60d3      	str	r3, [r2, #12]
	//PB11
	GPIOB->PUPDR |= (1U<<22);
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <rocketI2C2_init+0xfc>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a1b      	ldr	r2, [pc, #108]	; (800060c <rocketI2C2_init+0xfc>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a4:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~ (1U<<23);
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <rocketI2C2_init+0xfc>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <rocketI2C2_init+0xfc>)
 80005ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80005b0:	60d3      	str	r3, [r2, #12]

	//Habilita clock para I2C2 em APB1
	RCC->APB1ENR |= (1U<<22);
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <rocketI2C2_init+0xf8>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	4a14      	ldr	r2, [pc, #80]	; (8000608 <rocketI2C2_init+0xf8>)
 80005b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005bc:	6413      	str	r3, [r2, #64]	; 0x40

	//Reseta registradores do I2C2 por meio do SoftwareReset
	I2C2->CR1 &=~ (1U<<0);
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <rocketI2C2_init+0x100>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <rocketI2C2_init+0x100>)
 80005c4:	f023 0301 	bic.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i<10; i++){}
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	e002      	b.n	80005d6 <rocketI2C2_init+0xc6>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	ddf9      	ble.n	80005d0 <rocketI2C2_init+0xc0>
	I2C2->CR1 &=~ (1U<<1);
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <rocketI2C2_init+0x100>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <rocketI2C2_init+0x100>)
 80005e2:	f023 0302 	bic.w	r3, r3, #2
 80005e6:	6013      	str	r3, [r2, #0]

	//Setar clock para I2C2 16MHz
	I2C2->TIMINGR = 0x10811E25;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <rocketI2C2_init+0x100>)
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <rocketI2C2_init+0x104>)
 80005ec:	611a      	str	r2, [r3, #16]

	//Inicia periférico
	I2C2->CR1 |= (1U<<0);
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <rocketI2C2_init+0x100>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <rocketI2C2_init+0x100>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6013      	str	r3, [r2, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020400 	.word	0x40020400
 8000610:	40005800 	.word	0x40005800
 8000614:	10811e25 	.word	0x10811e25

08000618 <I2C2_burstWrite>:
		        n--;
		    }
		}
}

void I2C2_burstWrite(char saddr, char maddr, char* data, int n) {
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60ba      	str	r2, [r7, #8]
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	460b      	mov	r3, r1
 8000628:	73bb      	strb	r3, [r7, #14]

	// Preserve the rest of the CR2 register and update the NBYTES field to 1 byte
    I2C2->CR2 = (I2C2->CR2 & ~(0xFFU << 16)) | (1U << 16);
 800062a:	4b39      	ldr	r3, [pc, #228]	; (8000710 <I2C2_burstWrite+0xf8>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000632:	4a37      	ldr	r2, [pc, #220]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	6053      	str	r3, [r2, #4]

    // Se i2c estiver ocupado, aguarde...
    while (I2C2->ISR & (1U << 15)) {}
 800063a:	bf00      	nop
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <I2C2_burstWrite+0xf8>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f9      	bne.n	800063c <I2C2_burstWrite+0x24>

    //Flush em TXDR
    I2C2->ISR |= (1U<<0);
 8000648:	4b31      	ldr	r3, [pc, #196]	; (8000710 <I2C2_burstWrite+0xf8>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a30      	ldr	r2, [pc, #192]	; (8000710 <I2C2_burstWrite+0xf8>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6193      	str	r3, [r2, #24]

    // Cria pulso da consição de início
    I2C2->CR2 |= (1U << 13);
 8000654:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <I2C2_burstWrite+0xf8>)
 800065a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065e:	6053      	str	r3, [r2, #4]

    // Transmite endereço do slave
    I2C2->TXDR = (saddr << 1);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	005a      	lsls	r2, r3, #1
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000666:	629a      	str	r2, [r3, #40]	; 0x28

    //Gera condição de parada
    I2C2->CR2 |= (1U<<14);
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <I2C2_burstWrite+0xf8>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <I2C2_burstWrite+0xf8>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6053      	str	r3, [r2, #4]

    // Aguarda que os dados sejam enviados
    while (!(I2C2->ISR & (1 << 0))) {}
 8000674:	bf00      	nop
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <I2C2_burstWrite+0x5e>

    // Check for ACK failure after address transmission
    if (I2C2->ISR & (1U << 4)) {
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d137      	bne.n	80006fe <I2C2_burstWrite+0xe6>
        // ACK failure, handle error or return if necessary
        return;
    }

    //Zera registrador
    I2C2->ISR = 0;
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]

    // Aguarda que os dados sejam enviados
    while (I2C2->ISR & (1 << 0)) {}
 8000694:	bf00      	nop
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <I2C2_burstWrite+0xf8>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f9      	bne.n	8000696 <I2C2_burstWrite+0x7e>

    // Evia endereço de memória a ser lido
    I2C2->TXDR = maddr;
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	6293      	str	r3, [r2, #40]	; 0x28



    for (int i = 0; i < n; i++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	e015      	b.n	80006da <I2C2_burstWrite+0xc2>
        // Wait for TXIS flag (data register empty)
        while (I2C2->ISR & (1U << 1)) {}
 80006ae:	bf00      	nop
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0302 	and.w	r3, r3, #2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f9      	bne.n	80006b0 <I2C2_burstWrite+0x98>

        I2C2->TXDR = *data++;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28

        if (I2C2->ISR & (1U << 4)) {
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d116      	bne.n	8000702 <I2C2_burstWrite+0xea>
    for (int i = 0; i < n; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbe5      	blt.n	80006ae <I2C2_burstWrite+0x96>
        }

    }

    // Wait for Transfer Complete
    while (!(I2C2->ISR & (1U << 6))) {}
 80006e2:	bf00      	nop
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f9      	beq.n	80006e4 <I2C2_burstWrite+0xcc>


    // Clear STOP bit
    I2C2->CR2 &= ~(1U << 14);
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <I2C2_burstWrite+0xf8>)
 80006f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006fa:	6053      	str	r3, [r2, #4]
 80006fc:	e002      	b.n	8000704 <I2C2_burstWrite+0xec>
        return;
 80006fe:	bf00      	nop
 8000700:	e000      	b.n	8000704 <I2C2_burstWrite+0xec>
             return;
 8000702:	bf00      	nop
}
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40005800 	.word	0x40005800

08000714 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e00a      	b.n	800073c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000726:	f3af 8000 	nop.w
 800072a:	4601      	mov	r1, r0
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60ba      	str	r2, [r7, #8]
 8000732:	b2ca      	uxtb	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf0      	blt.n	8000726 <_read+0x12>
  }

  return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e009      	b.n	8000774 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	60ba      	str	r2, [r7, #8]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fe93 	bl	8000494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf1      	blt.n	8000760 <_write+0x12>
  }
  return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_close>:

int _close(int file)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ae:	605a      	str	r2, [r3, #4]
  return 0;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_isatty>:

int _isatty(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f000 f846 	bl	80008b0 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20080000 	.word	0x20080000
 8000850:	00000400 	.word	0x00000400
 8000854:	20000090 	.word	0x20000090
 8000858:	200000a8 	.word	0x200000a8

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f000 f817 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fe0d 	bl	80004ac <main>

08000892 <LoopForever>:

LoopForever:
  b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008a0:	080018f0 	.word	0x080018f0
  ldr r2, =_sbss
 80008a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a8:	200000a4 	.word	0x200000a4

080008ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <__errno>:
 80008b0:	4b01      	ldr	r3, [pc, #4]	; (80008b8 <__errno+0x8>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	; (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	; (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	; (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	; (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 ffae 	bl	8001830 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	080018e8 	.word	0x080018e8
 80008f8:	080018e8 	.word	0x080018e8
 80008fc:	080018e8 	.word	0x080018e8
 8000900:	080018ec 	.word	0x080018ec

08000904 <memset>:
 8000904:	4402      	add	r2, r0
 8000906:	4603      	mov	r3, r0
 8000908:	4293      	cmp	r3, r2
 800090a:	d100      	bne.n	800090e <memset+0xa>
 800090c:	4770      	bx	lr
 800090e:	f803 1b01 	strb.w	r1, [r3], #1
 8000912:	e7f9      	b.n	8000908 <memset+0x4>

08000914 <iprintf>:
 8000914:	b40f      	push	{r0, r1, r2, r3}
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <iprintf+0x2c>)
 8000918:	b513      	push	{r0, r1, r4, lr}
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	b124      	cbz	r4, 8000928 <iprintf+0x14>
 800091e:	69a3      	ldr	r3, [r4, #24]
 8000920:	b913      	cbnz	r3, 8000928 <iprintf+0x14>
 8000922:	4620      	mov	r0, r4
 8000924:	f000 f866 	bl	80009f4 <__sinit>
 8000928:	ab05      	add	r3, sp, #20
 800092a:	9a04      	ldr	r2, [sp, #16]
 800092c:	68a1      	ldr	r1, [r4, #8]
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4620      	mov	r0, r4
 8000932:	f000 f9bd 	bl	8000cb0 <_vfiprintf_r>
 8000936:	b002      	add	sp, #8
 8000938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800093c:	b004      	add	sp, #16
 800093e:	4770      	bx	lr
 8000940:	20000000 	.word	0x20000000

08000944 <std>:
 8000944:	2300      	movs	r3, #0
 8000946:	b510      	push	{r4, lr}
 8000948:	4604      	mov	r4, r0
 800094a:	e9c0 3300 	strd	r3, r3, [r0]
 800094e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000952:	6083      	str	r3, [r0, #8]
 8000954:	8181      	strh	r1, [r0, #12]
 8000956:	6643      	str	r3, [r0, #100]	; 0x64
 8000958:	81c2      	strh	r2, [r0, #14]
 800095a:	6183      	str	r3, [r0, #24]
 800095c:	4619      	mov	r1, r3
 800095e:	2208      	movs	r2, #8
 8000960:	305c      	adds	r0, #92	; 0x5c
 8000962:	f7ff ffcf 	bl	8000904 <memset>
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <std+0x38>)
 8000968:	6263      	str	r3, [r4, #36]	; 0x24
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <std+0x3c>)
 800096c:	62a3      	str	r3, [r4, #40]	; 0x28
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <std+0x40>)
 8000970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <std+0x44>)
 8000974:	6224      	str	r4, [r4, #32]
 8000976:	6323      	str	r3, [r4, #48]	; 0x30
 8000978:	bd10      	pop	{r4, pc}
 800097a:	bf00      	nop
 800097c:	08001259 	.word	0x08001259
 8000980:	0800127b 	.word	0x0800127b
 8000984:	080012b3 	.word	0x080012b3
 8000988:	080012d7 	.word	0x080012d7

0800098c <_cleanup_r>:
 800098c:	4901      	ldr	r1, [pc, #4]	; (8000994 <_cleanup_r+0x8>)
 800098e:	f000 b8af 	b.w	8000af0 <_fwalk_reent>
 8000992:	bf00      	nop
 8000994:	080015b1 	.word	0x080015b1

08000998 <__sfmoreglue>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	2268      	movs	r2, #104	; 0x68
 800099c:	1e4d      	subs	r5, r1, #1
 800099e:	4355      	muls	r5, r2
 80009a0:	460e      	mov	r6, r1
 80009a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009a6:	f000 f8e5 	bl	8000b74 <_malloc_r>
 80009aa:	4604      	mov	r4, r0
 80009ac:	b140      	cbz	r0, 80009c0 <__sfmoreglue+0x28>
 80009ae:	2100      	movs	r1, #0
 80009b0:	e9c0 1600 	strd	r1, r6, [r0]
 80009b4:	300c      	adds	r0, #12
 80009b6:	60a0      	str	r0, [r4, #8]
 80009b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009bc:	f7ff ffa2 	bl	8000904 <memset>
 80009c0:	4620      	mov	r0, r4
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <__sfp_lock_acquire>:
 80009c4:	4801      	ldr	r0, [pc, #4]	; (80009cc <__sfp_lock_acquire+0x8>)
 80009c6:	f000 b8b3 	b.w	8000b30 <__retarget_lock_acquire_recursive>
 80009ca:	bf00      	nop
 80009cc:	20000095 	.word	0x20000095

080009d0 <__sfp_lock_release>:
 80009d0:	4801      	ldr	r0, [pc, #4]	; (80009d8 <__sfp_lock_release+0x8>)
 80009d2:	f000 b8ae 	b.w	8000b32 <__retarget_lock_release_recursive>
 80009d6:	bf00      	nop
 80009d8:	20000095 	.word	0x20000095

080009dc <__sinit_lock_acquire>:
 80009dc:	4801      	ldr	r0, [pc, #4]	; (80009e4 <__sinit_lock_acquire+0x8>)
 80009de:	f000 b8a7 	b.w	8000b30 <__retarget_lock_acquire_recursive>
 80009e2:	bf00      	nop
 80009e4:	20000096 	.word	0x20000096

080009e8 <__sinit_lock_release>:
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <__sinit_lock_release+0x8>)
 80009ea:	f000 b8a2 	b.w	8000b32 <__retarget_lock_release_recursive>
 80009ee:	bf00      	nop
 80009f0:	20000096 	.word	0x20000096

080009f4 <__sinit>:
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4604      	mov	r4, r0
 80009f8:	f7ff fff0 	bl	80009dc <__sinit_lock_acquire>
 80009fc:	69a3      	ldr	r3, [r4, #24]
 80009fe:	b11b      	cbz	r3, 8000a08 <__sinit+0x14>
 8000a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a04:	f7ff bff0 	b.w	80009e8 <__sinit_lock_release>
 8000a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <__sinit+0x68>)
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <__sinit+0x6c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	bf04      	itt	eq
 8000a1a:	2301      	moveq	r3, #1
 8000a1c:	61a3      	streq	r3, [r4, #24]
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f000 f820 	bl	8000a64 <__sfp>
 8000a24:	6060      	str	r0, [r4, #4]
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 f81c 	bl	8000a64 <__sfp>
 8000a2c:	60a0      	str	r0, [r4, #8]
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f000 f818 	bl	8000a64 <__sfp>
 8000a34:	2200      	movs	r2, #0
 8000a36:	60e0      	str	r0, [r4, #12]
 8000a38:	2104      	movs	r1, #4
 8000a3a:	6860      	ldr	r0, [r4, #4]
 8000a3c:	f7ff ff82 	bl	8000944 <std>
 8000a40:	68a0      	ldr	r0, [r4, #8]
 8000a42:	2201      	movs	r2, #1
 8000a44:	2109      	movs	r1, #9
 8000a46:	f7ff ff7d 	bl	8000944 <std>
 8000a4a:	68e0      	ldr	r0, [r4, #12]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	2112      	movs	r1, #18
 8000a50:	f7ff ff78 	bl	8000944 <std>
 8000a54:	2301      	movs	r3, #1
 8000a56:	61a3      	str	r3, [r4, #24]
 8000a58:	e7d2      	b.n	8000a00 <__sinit+0xc>
 8000a5a:	bf00      	nop
 8000a5c:	08001850 	.word	0x08001850
 8000a60:	0800098d 	.word	0x0800098d

08000a64 <__sfp>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	4607      	mov	r7, r0
 8000a68:	f7ff ffac 	bl	80009c4 <__sfp_lock_acquire>
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <__sfp+0x84>)
 8000a6e:	681e      	ldr	r6, [r3, #0]
 8000a70:	69b3      	ldr	r3, [r6, #24]
 8000a72:	b913      	cbnz	r3, 8000a7a <__sfp+0x16>
 8000a74:	4630      	mov	r0, r6
 8000a76:	f7ff ffbd 	bl	80009f4 <__sinit>
 8000a7a:	3648      	adds	r6, #72	; 0x48
 8000a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	d503      	bpl.n	8000a8c <__sfp+0x28>
 8000a84:	6833      	ldr	r3, [r6, #0]
 8000a86:	b30b      	cbz	r3, 8000acc <__sfp+0x68>
 8000a88:	6836      	ldr	r6, [r6, #0]
 8000a8a:	e7f7      	b.n	8000a7c <__sfp+0x18>
 8000a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a90:	b9d5      	cbnz	r5, 8000ac8 <__sfp+0x64>
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <__sfp+0x88>)
 8000a94:	60e3      	str	r3, [r4, #12]
 8000a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8000a9c:	f000 f847 	bl	8000b2e <__retarget_lock_init_recursive>
 8000aa0:	f7ff ff96 	bl	80009d0 <__sfp_lock_release>
 8000aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000aac:	6025      	str	r5, [r4, #0]
 8000aae:	61a5      	str	r5, [r4, #24]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4629      	mov	r1, r5
 8000ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ab8:	f7ff ff24 	bl	8000904 <memset>
 8000abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac8:	3468      	adds	r4, #104	; 0x68
 8000aca:	e7d9      	b.n	8000a80 <__sfp+0x1c>
 8000acc:	2104      	movs	r1, #4
 8000ace:	4638      	mov	r0, r7
 8000ad0:	f7ff ff62 	bl	8000998 <__sfmoreglue>
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	6030      	str	r0, [r6, #0]
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1d5      	bne.n	8000a88 <__sfp+0x24>
 8000adc:	f7ff ff78 	bl	80009d0 <__sfp_lock_release>
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	e7ee      	b.n	8000ac4 <__sfp+0x60>
 8000ae6:	bf00      	nop
 8000ae8:	08001850 	.word	0x08001850
 8000aec:	ffff0001 	.word	0xffff0001

08000af0 <_fwalk_reent>:
 8000af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af4:	4606      	mov	r6, r0
 8000af6:	4688      	mov	r8, r1
 8000af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b02:	f1b9 0901 	subs.w	r9, r9, #1
 8000b06:	d505      	bpl.n	8000b14 <_fwalk_reent+0x24>
 8000b08:	6824      	ldr	r4, [r4, #0]
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d1f7      	bne.n	8000afe <_fwalk_reent+0xe>
 8000b0e:	4638      	mov	r0, r7
 8000b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b14:	89ab      	ldrh	r3, [r5, #12]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d907      	bls.n	8000b2a <_fwalk_reent+0x3a>
 8000b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	d003      	beq.n	8000b2a <_fwalk_reent+0x3a>
 8000b22:	4629      	mov	r1, r5
 8000b24:	4630      	mov	r0, r6
 8000b26:	47c0      	blx	r8
 8000b28:	4307      	orrs	r7, r0
 8000b2a:	3568      	adds	r5, #104	; 0x68
 8000b2c:	e7e9      	b.n	8000b02 <_fwalk_reent+0x12>

08000b2e <__retarget_lock_init_recursive>:
 8000b2e:	4770      	bx	lr

08000b30 <__retarget_lock_acquire_recursive>:
 8000b30:	4770      	bx	lr

08000b32 <__retarget_lock_release_recursive>:
 8000b32:	4770      	bx	lr

08000b34 <sbrk_aligned>:
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	4e0e      	ldr	r6, [pc, #56]	; (8000b70 <sbrk_aligned+0x3c>)
 8000b38:	460c      	mov	r4, r1
 8000b3a:	6831      	ldr	r1, [r6, #0]
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	b911      	cbnz	r1, 8000b46 <sbrk_aligned+0x12>
 8000b40:	f000 fb7a 	bl	8001238 <_sbrk_r>
 8000b44:	6030      	str	r0, [r6, #0]
 8000b46:	4621      	mov	r1, r4
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 fb75 	bl	8001238 <_sbrk_r>
 8000b4e:	1c43      	adds	r3, r0, #1
 8000b50:	d00a      	beq.n	8000b68 <sbrk_aligned+0x34>
 8000b52:	1cc4      	adds	r4, r0, #3
 8000b54:	f024 0403 	bic.w	r4, r4, #3
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d007      	beq.n	8000b6c <sbrk_aligned+0x38>
 8000b5c:	1a21      	subs	r1, r4, r0
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f000 fb6a 	bl	8001238 <_sbrk_r>
 8000b64:	3001      	adds	r0, #1
 8000b66:	d101      	bne.n	8000b6c <sbrk_aligned+0x38>
 8000b68:	f04f 34ff 	mov.w	r4, #4294967295
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	2000009c 	.word	0x2000009c

08000b74 <_malloc_r>:
 8000b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b78:	1ccd      	adds	r5, r1, #3
 8000b7a:	f025 0503 	bic.w	r5, r5, #3
 8000b7e:	3508      	adds	r5, #8
 8000b80:	2d0c      	cmp	r5, #12
 8000b82:	bf38      	it	cc
 8000b84:	250c      	movcc	r5, #12
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	4607      	mov	r7, r0
 8000b8a:	db01      	blt.n	8000b90 <_malloc_r+0x1c>
 8000b8c:	42a9      	cmp	r1, r5
 8000b8e:	d905      	bls.n	8000b9c <_malloc_r+0x28>
 8000b90:	230c      	movs	r3, #12
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	2600      	movs	r6, #0
 8000b96:	4630      	mov	r0, r6
 8000b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b9c:	4e2e      	ldr	r6, [pc, #184]	; (8000c58 <_malloc_r+0xe4>)
 8000b9e:	f000 fdbb 	bl	8001718 <__malloc_lock>
 8000ba2:	6833      	ldr	r3, [r6, #0]
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	bb34      	cbnz	r4, 8000bf6 <_malloc_r+0x82>
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4638      	mov	r0, r7
 8000bac:	f7ff ffc2 	bl	8000b34 <sbrk_aligned>
 8000bb0:	1c43      	adds	r3, r0, #1
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	d14d      	bne.n	8000c52 <_malloc_r+0xde>
 8000bb6:	6834      	ldr	r4, [r6, #0]
 8000bb8:	4626      	mov	r6, r4
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d140      	bne.n	8000c40 <_malloc_r+0xcc>
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	eb04 0803 	add.w	r8, r4, r3
 8000bc8:	f000 fb36 	bl	8001238 <_sbrk_r>
 8000bcc:	4580      	cmp	r8, r0
 8000bce:	d13a      	bne.n	8000c46 <_malloc_r+0xd2>
 8000bd0:	6821      	ldr	r1, [r4, #0]
 8000bd2:	3503      	adds	r5, #3
 8000bd4:	1a6d      	subs	r5, r5, r1
 8000bd6:	f025 0503 	bic.w	r5, r5, #3
 8000bda:	3508      	adds	r5, #8
 8000bdc:	2d0c      	cmp	r5, #12
 8000bde:	bf38      	it	cc
 8000be0:	250c      	movcc	r5, #12
 8000be2:	4629      	mov	r1, r5
 8000be4:	4638      	mov	r0, r7
 8000be6:	f7ff ffa5 	bl	8000b34 <sbrk_aligned>
 8000bea:	3001      	adds	r0, #1
 8000bec:	d02b      	beq.n	8000c46 <_malloc_r+0xd2>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	442b      	add	r3, r5
 8000bf2:	6023      	str	r3, [r4, #0]
 8000bf4:	e00e      	b.n	8000c14 <_malloc_r+0xa0>
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	1b52      	subs	r2, r2, r5
 8000bfa:	d41e      	bmi.n	8000c3a <_malloc_r+0xc6>
 8000bfc:	2a0b      	cmp	r2, #11
 8000bfe:	d916      	bls.n	8000c2e <_malloc_r+0xba>
 8000c00:	1961      	adds	r1, r4, r5
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	6025      	str	r5, [r4, #0]
 8000c06:	bf18      	it	ne
 8000c08:	6059      	strne	r1, [r3, #4]
 8000c0a:	6863      	ldr	r3, [r4, #4]
 8000c0c:	bf08      	it	eq
 8000c0e:	6031      	streq	r1, [r6, #0]
 8000c10:	5162      	str	r2, [r4, r5]
 8000c12:	604b      	str	r3, [r1, #4]
 8000c14:	4638      	mov	r0, r7
 8000c16:	f104 060b 	add.w	r6, r4, #11
 8000c1a:	f000 fd83 	bl	8001724 <__malloc_unlock>
 8000c1e:	f026 0607 	bic.w	r6, r6, #7
 8000c22:	1d23      	adds	r3, r4, #4
 8000c24:	1af2      	subs	r2, r6, r3
 8000c26:	d0b6      	beq.n	8000b96 <_malloc_r+0x22>
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	50a3      	str	r3, [r4, r2]
 8000c2c:	e7b3      	b.n	8000b96 <_malloc_r+0x22>
 8000c2e:	6862      	ldr	r2, [r4, #4]
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	bf0c      	ite	eq
 8000c34:	6032      	streq	r2, [r6, #0]
 8000c36:	605a      	strne	r2, [r3, #4]
 8000c38:	e7ec      	b.n	8000c14 <_malloc_r+0xa0>
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	6864      	ldr	r4, [r4, #4]
 8000c3e:	e7b2      	b.n	8000ba6 <_malloc_r+0x32>
 8000c40:	4634      	mov	r4, r6
 8000c42:	6876      	ldr	r6, [r6, #4]
 8000c44:	e7b9      	b.n	8000bba <_malloc_r+0x46>
 8000c46:	230c      	movs	r3, #12
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	f000 fd6a 	bl	8001724 <__malloc_unlock>
 8000c50:	e7a1      	b.n	8000b96 <_malloc_r+0x22>
 8000c52:	6025      	str	r5, [r4, #0]
 8000c54:	e7de      	b.n	8000c14 <_malloc_r+0xa0>
 8000c56:	bf00      	nop
 8000c58:	20000098 	.word	0x20000098

08000c5c <__sfputc_r>:
 8000c5c:	6893      	ldr	r3, [r2, #8]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	b410      	push	{r4}
 8000c64:	6093      	str	r3, [r2, #8]
 8000c66:	da08      	bge.n	8000c7a <__sfputc_r+0x1e>
 8000c68:	6994      	ldr	r4, [r2, #24]
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	db01      	blt.n	8000c72 <__sfputc_r+0x16>
 8000c6e:	290a      	cmp	r1, #10
 8000c70:	d103      	bne.n	8000c7a <__sfputc_r+0x1e>
 8000c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c76:	f000 bb33 	b.w	80012e0 <__swbuf_r>
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	1c58      	adds	r0, r3, #1
 8000c7e:	6010      	str	r0, [r2, #0]
 8000c80:	7019      	strb	r1, [r3, #0]
 8000c82:	4608      	mov	r0, r1
 8000c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <__sfputs_r>:
 8000c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	460f      	mov	r7, r1
 8000c90:	4614      	mov	r4, r2
 8000c92:	18d5      	adds	r5, r2, r3
 8000c94:	42ac      	cmp	r4, r5
 8000c96:	d101      	bne.n	8000c9c <__sfputs_r+0x12>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e007      	b.n	8000cac <__sfputs_r+0x22>
 8000c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ca0:	463a      	mov	r2, r7
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f7ff ffda 	bl	8000c5c <__sfputc_r>
 8000ca8:	1c43      	adds	r3, r0, #1
 8000caa:	d1f3      	bne.n	8000c94 <__sfputs_r+0xa>
 8000cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cb0 <_vfiprintf_r>:
 8000cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	460d      	mov	r5, r1
 8000cb6:	b09d      	sub	sp, #116	; 0x74
 8000cb8:	4614      	mov	r4, r2
 8000cba:	4698      	mov	r8, r3
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	b118      	cbz	r0, 8000cc8 <_vfiprintf_r+0x18>
 8000cc0:	6983      	ldr	r3, [r0, #24]
 8000cc2:	b90b      	cbnz	r3, 8000cc8 <_vfiprintf_r+0x18>
 8000cc4:	f7ff fe96 	bl	80009f4 <__sinit>
 8000cc8:	4b89      	ldr	r3, [pc, #548]	; (8000ef0 <_vfiprintf_r+0x240>)
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d11b      	bne.n	8000d06 <_vfiprintf_r+0x56>
 8000cce:	6875      	ldr	r5, [r6, #4]
 8000cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cd2:	07d9      	lsls	r1, r3, #31
 8000cd4:	d405      	bmi.n	8000ce2 <_vfiprintf_r+0x32>
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	059a      	lsls	r2, r3, #22
 8000cda:	d402      	bmi.n	8000ce2 <_vfiprintf_r+0x32>
 8000cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cde:	f7ff ff27 	bl	8000b30 <__retarget_lock_acquire_recursive>
 8000ce2:	89ab      	ldrh	r3, [r5, #12]
 8000ce4:	071b      	lsls	r3, r3, #28
 8000ce6:	d501      	bpl.n	8000cec <_vfiprintf_r+0x3c>
 8000ce8:	692b      	ldr	r3, [r5, #16]
 8000cea:	b9eb      	cbnz	r3, 8000d28 <_vfiprintf_r+0x78>
 8000cec:	4629      	mov	r1, r5
 8000cee:	4630      	mov	r0, r6
 8000cf0:	f000 fb5a 	bl	80013a8 <__swsetup_r>
 8000cf4:	b1c0      	cbz	r0, 8000d28 <_vfiprintf_r+0x78>
 8000cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cf8:	07dc      	lsls	r4, r3, #31
 8000cfa:	d50e      	bpl.n	8000d1a <_vfiprintf_r+0x6a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	b01d      	add	sp, #116	; 0x74
 8000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d06:	4b7b      	ldr	r3, [pc, #492]	; (8000ef4 <_vfiprintf_r+0x244>)
 8000d08:	429d      	cmp	r5, r3
 8000d0a:	d101      	bne.n	8000d10 <_vfiprintf_r+0x60>
 8000d0c:	68b5      	ldr	r5, [r6, #8]
 8000d0e:	e7df      	b.n	8000cd0 <_vfiprintf_r+0x20>
 8000d10:	4b79      	ldr	r3, [pc, #484]	; (8000ef8 <_vfiprintf_r+0x248>)
 8000d12:	429d      	cmp	r5, r3
 8000d14:	bf08      	it	eq
 8000d16:	68f5      	ldreq	r5, [r6, #12]
 8000d18:	e7da      	b.n	8000cd0 <_vfiprintf_r+0x20>
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	0598      	lsls	r0, r3, #22
 8000d1e:	d4ed      	bmi.n	8000cfc <_vfiprintf_r+0x4c>
 8000d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d22:	f7ff ff06 	bl	8000b32 <__retarget_lock_release_recursive>
 8000d26:	e7e9      	b.n	8000cfc <_vfiprintf_r+0x4c>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d36:	2330      	movs	r3, #48	; 0x30
 8000d38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000efc <_vfiprintf_r+0x24c>
 8000d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d40:	f04f 0901 	mov.w	r9, #1
 8000d44:	4623      	mov	r3, r4
 8000d46:	469a      	mov	sl, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	b10a      	cbz	r2, 8000d52 <_vfiprintf_r+0xa2>
 8000d4e:	2a25      	cmp	r2, #37	; 0x25
 8000d50:	d1f9      	bne.n	8000d46 <_vfiprintf_r+0x96>
 8000d52:	ebba 0b04 	subs.w	fp, sl, r4
 8000d56:	d00b      	beq.n	8000d70 <_vfiprintf_r+0xc0>
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff ff93 	bl	8000c8a <__sfputs_r>
 8000d64:	3001      	adds	r0, #1
 8000d66:	f000 80aa 	beq.w	8000ebe <_vfiprintf_r+0x20e>
 8000d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d6c:	445a      	add	r2, fp
 8000d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8000d70:	f89a 3000 	ldrb.w	r3, [sl]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a2 	beq.w	8000ebe <_vfiprintf_r+0x20e>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d84:	f10a 0a01 	add.w	sl, sl, #1
 8000d88:	9304      	str	r3, [sp, #16]
 8000d8a:	9307      	str	r3, [sp, #28]
 8000d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d90:	931a      	str	r3, [sp, #104]	; 0x68
 8000d92:	4654      	mov	r4, sl
 8000d94:	2205      	movs	r2, #5
 8000d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9a:	4858      	ldr	r0, [pc, #352]	; (8000efc <_vfiprintf_r+0x24c>)
 8000d9c:	f7ff fa50 	bl	8000240 <memchr>
 8000da0:	9a04      	ldr	r2, [sp, #16]
 8000da2:	b9d8      	cbnz	r0, 8000ddc <_vfiprintf_r+0x12c>
 8000da4:	06d1      	lsls	r1, r2, #27
 8000da6:	bf44      	itt	mi
 8000da8:	2320      	movmi	r3, #32
 8000daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dae:	0713      	lsls	r3, r2, #28
 8000db0:	bf44      	itt	mi
 8000db2:	232b      	movmi	r3, #43	; 0x2b
 8000db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000db8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8000dbe:	d015      	beq.n	8000dec <_vfiprintf_r+0x13c>
 8000dc0:	9a07      	ldr	r2, [sp, #28]
 8000dc2:	4654      	mov	r4, sl
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f04f 0c0a 	mov.w	ip, #10
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd0:	3b30      	subs	r3, #48	; 0x30
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d94e      	bls.n	8000e74 <_vfiprintf_r+0x1c4>
 8000dd6:	b1b0      	cbz	r0, 8000e06 <_vfiprintf_r+0x156>
 8000dd8:	9207      	str	r2, [sp, #28]
 8000dda:	e014      	b.n	8000e06 <_vfiprintf_r+0x156>
 8000ddc:	eba0 0308 	sub.w	r3, r0, r8
 8000de0:	fa09 f303 	lsl.w	r3, r9, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	9304      	str	r3, [sp, #16]
 8000de8:	46a2      	mov	sl, r4
 8000dea:	e7d2      	b.n	8000d92 <_vfiprintf_r+0xe2>
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	1d19      	adds	r1, r3, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	9103      	str	r1, [sp, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bfbb      	ittet	lt
 8000df8:	425b      	neglt	r3, r3
 8000dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8000dfe:	9307      	strge	r3, [sp, #28]
 8000e00:	9307      	strlt	r3, [sp, #28]
 8000e02:	bfb8      	it	lt
 8000e04:	9204      	strlt	r2, [sp, #16]
 8000e06:	7823      	ldrb	r3, [r4, #0]
 8000e08:	2b2e      	cmp	r3, #46	; 0x2e
 8000e0a:	d10c      	bne.n	8000e26 <_vfiprintf_r+0x176>
 8000e0c:	7863      	ldrb	r3, [r4, #1]
 8000e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e10:	d135      	bne.n	8000e7e <_vfiprintf_r+0x1ce>
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	1d1a      	adds	r2, r3, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	9203      	str	r2, [sp, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bfb8      	it	lt
 8000e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e22:	3402      	adds	r4, #2
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f0c <_vfiprintf_r+0x25c>
 8000e2a:	7821      	ldrb	r1, [r4, #0]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4650      	mov	r0, sl
 8000e30:	f7ff fa06 	bl	8000240 <memchr>
 8000e34:	b140      	cbz	r0, 8000e48 <_vfiprintf_r+0x198>
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	eba0 000a 	sub.w	r0, r0, sl
 8000e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e40:	9b04      	ldr	r3, [sp, #16]
 8000e42:	4303      	orrs	r3, r0
 8000e44:	3401      	adds	r4, #1
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e4c:	482c      	ldr	r0, [pc, #176]	; (8000f00 <_vfiprintf_r+0x250>)
 8000e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e52:	2206      	movs	r2, #6
 8000e54:	f7ff f9f4 	bl	8000240 <memchr>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d03f      	beq.n	8000edc <_vfiprintf_r+0x22c>
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <_vfiprintf_r+0x254>)
 8000e5e:	bb1b      	cbnz	r3, 8000ea8 <_vfiprintf_r+0x1f8>
 8000e60:	9b03      	ldr	r3, [sp, #12]
 8000e62:	3307      	adds	r3, #7
 8000e64:	f023 0307 	bic.w	r3, r3, #7
 8000e68:	3308      	adds	r3, #8
 8000e6a:	9303      	str	r3, [sp, #12]
 8000e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e6e:	443b      	add	r3, r7
 8000e70:	9309      	str	r3, [sp, #36]	; 0x24
 8000e72:	e767      	b.n	8000d44 <_vfiprintf_r+0x94>
 8000e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e78:	460c      	mov	r4, r1
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	e7a5      	b.n	8000dca <_vfiprintf_r+0x11a>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	3401      	adds	r4, #1
 8000e82:	9305      	str	r3, [sp, #20]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 0c0a 	mov.w	ip, #10
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e90:	3a30      	subs	r2, #48	; 0x30
 8000e92:	2a09      	cmp	r2, #9
 8000e94:	d903      	bls.n	8000e9e <_vfiprintf_r+0x1ee>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0c5      	beq.n	8000e26 <_vfiprintf_r+0x176>
 8000e9a:	9105      	str	r1, [sp, #20]
 8000e9c:	e7c3      	b.n	8000e26 <_vfiprintf_r+0x176>
 8000e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e7f0      	b.n	8000e8a <_vfiprintf_r+0x1da>
 8000ea8:	ab03      	add	r3, sp, #12
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	462a      	mov	r2, r5
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <_vfiprintf_r+0x258>)
 8000eb0:	a904      	add	r1, sp, #16
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	4607      	mov	r7, r0
 8000eba:	1c78      	adds	r0, r7, #1
 8000ebc:	d1d6      	bne.n	8000e6c <_vfiprintf_r+0x1bc>
 8000ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ec0:	07d9      	lsls	r1, r3, #31
 8000ec2:	d405      	bmi.n	8000ed0 <_vfiprintf_r+0x220>
 8000ec4:	89ab      	ldrh	r3, [r5, #12]
 8000ec6:	059a      	lsls	r2, r3, #22
 8000ec8:	d402      	bmi.n	8000ed0 <_vfiprintf_r+0x220>
 8000eca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ecc:	f7ff fe31 	bl	8000b32 <__retarget_lock_release_recursive>
 8000ed0:	89ab      	ldrh	r3, [r5, #12]
 8000ed2:	065b      	lsls	r3, r3, #25
 8000ed4:	f53f af12 	bmi.w	8000cfc <_vfiprintf_r+0x4c>
 8000ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000eda:	e711      	b.n	8000d00 <_vfiprintf_r+0x50>
 8000edc:	ab03      	add	r3, sp, #12
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	462a      	mov	r2, r5
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <_vfiprintf_r+0x258>)
 8000ee4:	a904      	add	r1, sp, #16
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	f000 f880 	bl	8000fec <_printf_i>
 8000eec:	e7e4      	b.n	8000eb8 <_vfiprintf_r+0x208>
 8000eee:	bf00      	nop
 8000ef0:	08001874 	.word	0x08001874
 8000ef4:	08001894 	.word	0x08001894
 8000ef8:	08001854 	.word	0x08001854
 8000efc:	080018b4 	.word	0x080018b4
 8000f00:	080018be 	.word	0x080018be
 8000f04:	00000000 	.word	0x00000000
 8000f08:	08000c8b 	.word	0x08000c8b
 8000f0c:	080018ba 	.word	0x080018ba

08000f10 <_printf_common>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	4616      	mov	r6, r2
 8000f16:	4699      	mov	r9, r3
 8000f18:	688a      	ldr	r2, [r1, #8]
 8000f1a:	690b      	ldr	r3, [r1, #16]
 8000f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bfb8      	it	lt
 8000f24:	4613      	movlt	r3, r2
 8000f26:	6033      	str	r3, [r6, #0]
 8000f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f2c:	4607      	mov	r7, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	b10a      	cbz	r2, 8000f36 <_printf_common+0x26>
 8000f32:	3301      	adds	r3, #1
 8000f34:	6033      	str	r3, [r6, #0]
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	0699      	lsls	r1, r3, #26
 8000f3a:	bf42      	ittt	mi
 8000f3c:	6833      	ldrmi	r3, [r6, #0]
 8000f3e:	3302      	addmi	r3, #2
 8000f40:	6033      	strmi	r3, [r6, #0]
 8000f42:	6825      	ldr	r5, [r4, #0]
 8000f44:	f015 0506 	ands.w	r5, r5, #6
 8000f48:	d106      	bne.n	8000f58 <_printf_common+0x48>
 8000f4a:	f104 0a19 	add.w	sl, r4, #25
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	6832      	ldr	r2, [r6, #0]
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	dc26      	bgt.n	8000fa6 <_printf_common+0x96>
 8000f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f5c:	1e13      	subs	r3, r2, #0
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	bf18      	it	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	0692      	lsls	r2, r2, #26
 8000f66:	d42b      	bmi.n	8000fc0 <_printf_common+0xb0>
 8000f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	4638      	mov	r0, r7
 8000f70:	47c0      	blx	r8
 8000f72:	3001      	adds	r0, #1
 8000f74:	d01e      	beq.n	8000fb4 <_printf_common+0xa4>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	68e5      	ldr	r5, [r4, #12]
 8000f7a:	6832      	ldr	r2, [r6, #0]
 8000f7c:	f003 0306 	and.w	r3, r3, #6
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	bf08      	it	eq
 8000f84:	1aad      	subeq	r5, r5, r2
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	6922      	ldr	r2, [r4, #16]
 8000f8a:	bf0c      	ite	eq
 8000f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f90:	2500      	movne	r5, #0
 8000f92:	4293      	cmp	r3, r2
 8000f94:	bfc4      	itt	gt
 8000f96:	1a9b      	subgt	r3, r3, r2
 8000f98:	18ed      	addgt	r5, r5, r3
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	341a      	adds	r4, #26
 8000f9e:	42b5      	cmp	r5, r6
 8000fa0:	d11a      	bne.n	8000fd8 <_printf_common+0xc8>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	e008      	b.n	8000fb8 <_printf_common+0xa8>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4652      	mov	r2, sl
 8000faa:	4649      	mov	r1, r9
 8000fac:	4638      	mov	r0, r7
 8000fae:	47c0      	blx	r8
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	d103      	bne.n	8000fbc <_printf_common+0xac>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbc:	3501      	adds	r5, #1
 8000fbe:	e7c6      	b.n	8000f4e <_printf_common+0x3e>
 8000fc0:	18e1      	adds	r1, r4, r3
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	2030      	movs	r0, #48	; 0x30
 8000fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fca:	4422      	add	r2, r4
 8000fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	e7c7      	b.n	8000f68 <_printf_common+0x58>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4649      	mov	r1, r9
 8000fde:	4638      	mov	r0, r7
 8000fe0:	47c0      	blx	r8
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d0e6      	beq.n	8000fb4 <_printf_common+0xa4>
 8000fe6:	3601      	adds	r6, #1
 8000fe8:	e7d9      	b.n	8000f9e <_printf_common+0x8e>
	...

08000fec <_printf_i>:
 8000fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff0:	7e0f      	ldrb	r7, [r1, #24]
 8000ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ff4:	2f78      	cmp	r7, #120	; 0x78
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001002:	d807      	bhi.n	8001014 <_printf_i+0x28>
 8001004:	2f62      	cmp	r7, #98	; 0x62
 8001006:	d80a      	bhi.n	800101e <_printf_i+0x32>
 8001008:	2f00      	cmp	r7, #0
 800100a:	f000 80d8 	beq.w	80011be <_printf_i+0x1d2>
 800100e:	2f58      	cmp	r7, #88	; 0x58
 8001010:	f000 80a3 	beq.w	800115a <_printf_i+0x16e>
 8001014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800101c:	e03a      	b.n	8001094 <_printf_i+0xa8>
 800101e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001022:	2b15      	cmp	r3, #21
 8001024:	d8f6      	bhi.n	8001014 <_printf_i+0x28>
 8001026:	a101      	add	r1, pc, #4	; (adr r1, 800102c <_printf_i+0x40>)
 8001028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800102c:	08001085 	.word	0x08001085
 8001030:	08001099 	.word	0x08001099
 8001034:	08001015 	.word	0x08001015
 8001038:	08001015 	.word	0x08001015
 800103c:	08001015 	.word	0x08001015
 8001040:	08001015 	.word	0x08001015
 8001044:	08001099 	.word	0x08001099
 8001048:	08001015 	.word	0x08001015
 800104c:	08001015 	.word	0x08001015
 8001050:	08001015 	.word	0x08001015
 8001054:	08001015 	.word	0x08001015
 8001058:	080011a5 	.word	0x080011a5
 800105c:	080010c9 	.word	0x080010c9
 8001060:	08001187 	.word	0x08001187
 8001064:	08001015 	.word	0x08001015
 8001068:	08001015 	.word	0x08001015
 800106c:	080011c7 	.word	0x080011c7
 8001070:	08001015 	.word	0x08001015
 8001074:	080010c9 	.word	0x080010c9
 8001078:	08001015 	.word	0x08001015
 800107c:	08001015 	.word	0x08001015
 8001080:	0800118f 	.word	0x0800118f
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	1d1a      	adds	r2, r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	602a      	str	r2, [r5, #0]
 800108c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001094:	2301      	movs	r3, #1
 8001096:	e0a3      	b.n	80011e0 <_printf_i+0x1f4>
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	6829      	ldr	r1, [r5, #0]
 800109c:	0606      	lsls	r6, r0, #24
 800109e:	f101 0304 	add.w	r3, r1, #4
 80010a2:	d50a      	bpl.n	80010ba <_printf_i+0xce>
 80010a4:	680e      	ldr	r6, [r1, #0]
 80010a6:	602b      	str	r3, [r5, #0]
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	da03      	bge.n	80010b4 <_printf_i+0xc8>
 80010ac:	232d      	movs	r3, #45	; 0x2d
 80010ae:	4276      	negs	r6, r6
 80010b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010b4:	485e      	ldr	r0, [pc, #376]	; (8001230 <_printf_i+0x244>)
 80010b6:	230a      	movs	r3, #10
 80010b8:	e019      	b.n	80010ee <_printf_i+0x102>
 80010ba:	680e      	ldr	r6, [r1, #0]
 80010bc:	602b      	str	r3, [r5, #0]
 80010be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80010c2:	bf18      	it	ne
 80010c4:	b236      	sxthne	r6, r6
 80010c6:	e7ef      	b.n	80010a8 <_printf_i+0xbc>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	1d19      	adds	r1, r3, #4
 80010ce:	6029      	str	r1, [r5, #0]
 80010d0:	0601      	lsls	r1, r0, #24
 80010d2:	d501      	bpl.n	80010d8 <_printf_i+0xec>
 80010d4:	681e      	ldr	r6, [r3, #0]
 80010d6:	e002      	b.n	80010de <_printf_i+0xf2>
 80010d8:	0646      	lsls	r6, r0, #25
 80010da:	d5fb      	bpl.n	80010d4 <_printf_i+0xe8>
 80010dc:	881e      	ldrh	r6, [r3, #0]
 80010de:	4854      	ldr	r0, [pc, #336]	; (8001230 <_printf_i+0x244>)
 80010e0:	2f6f      	cmp	r7, #111	; 0x6f
 80010e2:	bf0c      	ite	eq
 80010e4:	2308      	moveq	r3, #8
 80010e6:	230a      	movne	r3, #10
 80010e8:	2100      	movs	r1, #0
 80010ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010ee:	6865      	ldr	r5, [r4, #4]
 80010f0:	60a5      	str	r5, [r4, #8]
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	bfa2      	ittt	ge
 80010f6:	6821      	ldrge	r1, [r4, #0]
 80010f8:	f021 0104 	bicge.w	r1, r1, #4
 80010fc:	6021      	strge	r1, [r4, #0]
 80010fe:	b90e      	cbnz	r6, 8001104 <_printf_i+0x118>
 8001100:	2d00      	cmp	r5, #0
 8001102:	d04d      	beq.n	80011a0 <_printf_i+0x1b4>
 8001104:	4615      	mov	r5, r2
 8001106:	fbb6 f1f3 	udiv	r1, r6, r3
 800110a:	fb03 6711 	mls	r7, r3, r1, r6
 800110e:	5dc7      	ldrb	r7, [r0, r7]
 8001110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001114:	4637      	mov	r7, r6
 8001116:	42bb      	cmp	r3, r7
 8001118:	460e      	mov	r6, r1
 800111a:	d9f4      	bls.n	8001106 <_printf_i+0x11a>
 800111c:	2b08      	cmp	r3, #8
 800111e:	d10b      	bne.n	8001138 <_printf_i+0x14c>
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	07de      	lsls	r6, r3, #31
 8001124:	d508      	bpl.n	8001138 <_printf_i+0x14c>
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6861      	ldr	r1, [r4, #4]
 800112a:	4299      	cmp	r1, r3
 800112c:	bfde      	ittt	le
 800112e:	2330      	movle	r3, #48	; 0x30
 8001130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001134:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001138:	1b52      	subs	r2, r2, r5
 800113a:	6122      	str	r2, [r4, #16]
 800113c:	f8cd a000 	str.w	sl, [sp]
 8001140:	464b      	mov	r3, r9
 8001142:	aa03      	add	r2, sp, #12
 8001144:	4621      	mov	r1, r4
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fee2 	bl	8000f10 <_printf_common>
 800114c:	3001      	adds	r0, #1
 800114e:	d14c      	bne.n	80011ea <_printf_i+0x1fe>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	b004      	add	sp, #16
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	4835      	ldr	r0, [pc, #212]	; (8001230 <_printf_i+0x244>)
 800115c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001160:	6829      	ldr	r1, [r5, #0]
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f851 6b04 	ldr.w	r6, [r1], #4
 8001168:	6029      	str	r1, [r5, #0]
 800116a:	061d      	lsls	r5, r3, #24
 800116c:	d514      	bpl.n	8001198 <_printf_i+0x1ac>
 800116e:	07df      	lsls	r7, r3, #31
 8001170:	bf44      	itt	mi
 8001172:	f043 0320 	orrmi.w	r3, r3, #32
 8001176:	6023      	strmi	r3, [r4, #0]
 8001178:	b91e      	cbnz	r6, 8001182 <_printf_i+0x196>
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	f023 0320 	bic.w	r3, r3, #32
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	2310      	movs	r3, #16
 8001184:	e7b0      	b.n	80010e8 <_printf_i+0xfc>
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6023      	str	r3, [r4, #0]
 800118e:	2378      	movs	r3, #120	; 0x78
 8001190:	4828      	ldr	r0, [pc, #160]	; (8001234 <_printf_i+0x248>)
 8001192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001196:	e7e3      	b.n	8001160 <_printf_i+0x174>
 8001198:	0659      	lsls	r1, r3, #25
 800119a:	bf48      	it	mi
 800119c:	b2b6      	uxthmi	r6, r6
 800119e:	e7e6      	b.n	800116e <_printf_i+0x182>
 80011a0:	4615      	mov	r5, r2
 80011a2:	e7bb      	b.n	800111c <_printf_i+0x130>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	6826      	ldr	r6, [r4, #0]
 80011a8:	6961      	ldr	r1, [r4, #20]
 80011aa:	1d18      	adds	r0, r3, #4
 80011ac:	6028      	str	r0, [r5, #0]
 80011ae:	0635      	lsls	r5, r6, #24
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	d501      	bpl.n	80011b8 <_printf_i+0x1cc>
 80011b4:	6019      	str	r1, [r3, #0]
 80011b6:	e002      	b.n	80011be <_printf_i+0x1d2>
 80011b8:	0670      	lsls	r0, r6, #25
 80011ba:	d5fb      	bpl.n	80011b4 <_printf_i+0x1c8>
 80011bc:	8019      	strh	r1, [r3, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	6123      	str	r3, [r4, #16]
 80011c2:	4615      	mov	r5, r2
 80011c4:	e7ba      	b.n	800113c <_printf_i+0x150>
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	1d1a      	adds	r2, r3, #4
 80011ca:	602a      	str	r2, [r5, #0]
 80011cc:	681d      	ldr	r5, [r3, #0]
 80011ce:	6862      	ldr	r2, [r4, #4]
 80011d0:	2100      	movs	r1, #0
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff f834 	bl	8000240 <memchr>
 80011d8:	b108      	cbz	r0, 80011de <_printf_i+0x1f2>
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	6060      	str	r0, [r4, #4]
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	6123      	str	r3, [r4, #16]
 80011e2:	2300      	movs	r3, #0
 80011e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011e8:	e7a8      	b.n	800113c <_printf_i+0x150>
 80011ea:	6923      	ldr	r3, [r4, #16]
 80011ec:	462a      	mov	r2, r5
 80011ee:	4649      	mov	r1, r9
 80011f0:	4640      	mov	r0, r8
 80011f2:	47d0      	blx	sl
 80011f4:	3001      	adds	r0, #1
 80011f6:	d0ab      	beq.n	8001150 <_printf_i+0x164>
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	079b      	lsls	r3, r3, #30
 80011fc:	d413      	bmi.n	8001226 <_printf_i+0x23a>
 80011fe:	68e0      	ldr	r0, [r4, #12]
 8001200:	9b03      	ldr	r3, [sp, #12]
 8001202:	4298      	cmp	r0, r3
 8001204:	bfb8      	it	lt
 8001206:	4618      	movlt	r0, r3
 8001208:	e7a4      	b.n	8001154 <_printf_i+0x168>
 800120a:	2301      	movs	r3, #1
 800120c:	4632      	mov	r2, r6
 800120e:	4649      	mov	r1, r9
 8001210:	4640      	mov	r0, r8
 8001212:	47d0      	blx	sl
 8001214:	3001      	adds	r0, #1
 8001216:	d09b      	beq.n	8001150 <_printf_i+0x164>
 8001218:	3501      	adds	r5, #1
 800121a:	68e3      	ldr	r3, [r4, #12]
 800121c:	9903      	ldr	r1, [sp, #12]
 800121e:	1a5b      	subs	r3, r3, r1
 8001220:	42ab      	cmp	r3, r5
 8001222:	dcf2      	bgt.n	800120a <_printf_i+0x21e>
 8001224:	e7eb      	b.n	80011fe <_printf_i+0x212>
 8001226:	2500      	movs	r5, #0
 8001228:	f104 0619 	add.w	r6, r4, #25
 800122c:	e7f5      	b.n	800121a <_printf_i+0x22e>
 800122e:	bf00      	nop
 8001230:	080018c5 	.word	0x080018c5
 8001234:	080018d6 	.word	0x080018d6

08001238 <_sbrk_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d06      	ldr	r5, [pc, #24]	; (8001254 <_sbrk_r+0x1c>)
 800123c:	2300      	movs	r3, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	602b      	str	r3, [r5, #0]
 8001244:	f7ff fad4 	bl	80007f0 <_sbrk>
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	d102      	bne.n	8001252 <_sbrk_r+0x1a>
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	b103      	cbz	r3, 8001252 <_sbrk_r+0x1a>
 8001250:	6023      	str	r3, [r4, #0]
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	200000a0 	.word	0x200000a0

08001258 <__sread>:
 8001258:	b510      	push	{r4, lr}
 800125a:	460c      	mov	r4, r1
 800125c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001260:	f000 fab2 	bl	80017c8 <_read_r>
 8001264:	2800      	cmp	r0, #0
 8001266:	bfab      	itete	ge
 8001268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800126a:	89a3      	ldrhlt	r3, [r4, #12]
 800126c:	181b      	addge	r3, r3, r0
 800126e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001272:	bfac      	ite	ge
 8001274:	6563      	strge	r3, [r4, #84]	; 0x54
 8001276:	81a3      	strhlt	r3, [r4, #12]
 8001278:	bd10      	pop	{r4, pc}

0800127a <__swrite>:
 800127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127e:	461f      	mov	r7, r3
 8001280:	898b      	ldrh	r3, [r1, #12]
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	4605      	mov	r5, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4616      	mov	r6, r2
 800128a:	d505      	bpl.n	8001298 <__swrite+0x1e>
 800128c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001290:	2302      	movs	r3, #2
 8001292:	2200      	movs	r2, #0
 8001294:	f000 f9c8 	bl	8001628 <_lseek_r>
 8001298:	89a3      	ldrh	r3, [r4, #12]
 800129a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800129e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012a2:	81a3      	strh	r3, [r4, #12]
 80012a4:	4632      	mov	r2, r6
 80012a6:	463b      	mov	r3, r7
 80012a8:	4628      	mov	r0, r5
 80012aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012ae:	f000 b869 	b.w	8001384 <_write_r>

080012b2 <__sseek>:
 80012b2:	b510      	push	{r4, lr}
 80012b4:	460c      	mov	r4, r1
 80012b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ba:	f000 f9b5 	bl	8001628 <_lseek_r>
 80012be:	1c43      	adds	r3, r0, #1
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	bf15      	itete	ne
 80012c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80012c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012ce:	81a3      	strheq	r3, [r4, #12]
 80012d0:	bf18      	it	ne
 80012d2:	81a3      	strhne	r3, [r4, #12]
 80012d4:	bd10      	pop	{r4, pc}

080012d6 <__sclose>:
 80012d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012da:	f000 b8d3 	b.w	8001484 <_close_r>
	...

080012e0 <__swbuf_r>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	460e      	mov	r6, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	4605      	mov	r5, r0
 80012e8:	b118      	cbz	r0, 80012f2 <__swbuf_r+0x12>
 80012ea:	6983      	ldr	r3, [r0, #24]
 80012ec:	b90b      	cbnz	r3, 80012f2 <__swbuf_r+0x12>
 80012ee:	f7ff fb81 	bl	80009f4 <__sinit>
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <__swbuf_r+0x98>)
 80012f4:	429c      	cmp	r4, r3
 80012f6:	d12b      	bne.n	8001350 <__swbuf_r+0x70>
 80012f8:	686c      	ldr	r4, [r5, #4]
 80012fa:	69a3      	ldr	r3, [r4, #24]
 80012fc:	60a3      	str	r3, [r4, #8]
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	071a      	lsls	r2, r3, #28
 8001302:	d52f      	bpl.n	8001364 <__swbuf_r+0x84>
 8001304:	6923      	ldr	r3, [r4, #16]
 8001306:	b36b      	cbz	r3, 8001364 <__swbuf_r+0x84>
 8001308:	6923      	ldr	r3, [r4, #16]
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	1ac0      	subs	r0, r0, r3
 800130e:	6963      	ldr	r3, [r4, #20]
 8001310:	b2f6      	uxtb	r6, r6
 8001312:	4283      	cmp	r3, r0
 8001314:	4637      	mov	r7, r6
 8001316:	dc04      	bgt.n	8001322 <__swbuf_r+0x42>
 8001318:	4621      	mov	r1, r4
 800131a:	4628      	mov	r0, r5
 800131c:	f000 f948 	bl	80015b0 <_fflush_r>
 8001320:	bb30      	cbnz	r0, 8001370 <__swbuf_r+0x90>
 8001322:	68a3      	ldr	r3, [r4, #8]
 8001324:	3b01      	subs	r3, #1
 8001326:	60a3      	str	r3, [r4, #8]
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	6022      	str	r2, [r4, #0]
 800132e:	701e      	strb	r6, [r3, #0]
 8001330:	6963      	ldr	r3, [r4, #20]
 8001332:	3001      	adds	r0, #1
 8001334:	4283      	cmp	r3, r0
 8001336:	d004      	beq.n	8001342 <__swbuf_r+0x62>
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	07db      	lsls	r3, r3, #31
 800133c:	d506      	bpl.n	800134c <__swbuf_r+0x6c>
 800133e:	2e0a      	cmp	r6, #10
 8001340:	d104      	bne.n	800134c <__swbuf_r+0x6c>
 8001342:	4621      	mov	r1, r4
 8001344:	4628      	mov	r0, r5
 8001346:	f000 f933 	bl	80015b0 <_fflush_r>
 800134a:	b988      	cbnz	r0, 8001370 <__swbuf_r+0x90>
 800134c:	4638      	mov	r0, r7
 800134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <__swbuf_r+0x9c>)
 8001352:	429c      	cmp	r4, r3
 8001354:	d101      	bne.n	800135a <__swbuf_r+0x7a>
 8001356:	68ac      	ldr	r4, [r5, #8]
 8001358:	e7cf      	b.n	80012fa <__swbuf_r+0x1a>
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <__swbuf_r+0xa0>)
 800135c:	429c      	cmp	r4, r3
 800135e:	bf08      	it	eq
 8001360:	68ec      	ldreq	r4, [r5, #12]
 8001362:	e7ca      	b.n	80012fa <__swbuf_r+0x1a>
 8001364:	4621      	mov	r1, r4
 8001366:	4628      	mov	r0, r5
 8001368:	f000 f81e 	bl	80013a8 <__swsetup_r>
 800136c:	2800      	cmp	r0, #0
 800136e:	d0cb      	beq.n	8001308 <__swbuf_r+0x28>
 8001370:	f04f 37ff 	mov.w	r7, #4294967295
 8001374:	e7ea      	b.n	800134c <__swbuf_r+0x6c>
 8001376:	bf00      	nop
 8001378:	08001874 	.word	0x08001874
 800137c:	08001894 	.word	0x08001894
 8001380:	08001854 	.word	0x08001854

08001384 <_write_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d07      	ldr	r5, [pc, #28]	; (80013a4 <_write_r+0x20>)
 8001388:	4604      	mov	r4, r0
 800138a:	4608      	mov	r0, r1
 800138c:	4611      	mov	r1, r2
 800138e:	2200      	movs	r2, #0
 8001390:	602a      	str	r2, [r5, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f7ff f9db 	bl	800074e <_write>
 8001398:	1c43      	adds	r3, r0, #1
 800139a:	d102      	bne.n	80013a2 <_write_r+0x1e>
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	b103      	cbz	r3, 80013a2 <_write_r+0x1e>
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
 80013a4:	200000a0 	.word	0x200000a0

080013a8 <__swsetup_r>:
 80013a8:	4b32      	ldr	r3, [pc, #200]	; (8001474 <__swsetup_r+0xcc>)
 80013aa:	b570      	push	{r4, r5, r6, lr}
 80013ac:	681d      	ldr	r5, [r3, #0]
 80013ae:	4606      	mov	r6, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	b125      	cbz	r5, 80013be <__swsetup_r+0x16>
 80013b4:	69ab      	ldr	r3, [r5, #24]
 80013b6:	b913      	cbnz	r3, 80013be <__swsetup_r+0x16>
 80013b8:	4628      	mov	r0, r5
 80013ba:	f7ff fb1b 	bl	80009f4 <__sinit>
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <__swsetup_r+0xd0>)
 80013c0:	429c      	cmp	r4, r3
 80013c2:	d10f      	bne.n	80013e4 <__swsetup_r+0x3c>
 80013c4:	686c      	ldr	r4, [r5, #4]
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013cc:	0719      	lsls	r1, r3, #28
 80013ce:	d42c      	bmi.n	800142a <__swsetup_r+0x82>
 80013d0:	06dd      	lsls	r5, r3, #27
 80013d2:	d411      	bmi.n	80013f8 <__swsetup_r+0x50>
 80013d4:	2309      	movs	r3, #9
 80013d6:	6033      	str	r3, [r6, #0]
 80013d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
 80013e2:	e03e      	b.n	8001462 <__swsetup_r+0xba>
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <__swsetup_r+0xd4>)
 80013e6:	429c      	cmp	r4, r3
 80013e8:	d101      	bne.n	80013ee <__swsetup_r+0x46>
 80013ea:	68ac      	ldr	r4, [r5, #8]
 80013ec:	e7eb      	b.n	80013c6 <__swsetup_r+0x1e>
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <__swsetup_r+0xd8>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	bf08      	it	eq
 80013f4:	68ec      	ldreq	r4, [r5, #12]
 80013f6:	e7e6      	b.n	80013c6 <__swsetup_r+0x1e>
 80013f8:	0758      	lsls	r0, r3, #29
 80013fa:	d512      	bpl.n	8001422 <__swsetup_r+0x7a>
 80013fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013fe:	b141      	cbz	r1, 8001412 <__swsetup_r+0x6a>
 8001400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001404:	4299      	cmp	r1, r3
 8001406:	d002      	beq.n	800140e <__swsetup_r+0x66>
 8001408:	4630      	mov	r0, r6
 800140a:	f000 f991 	bl	8001730 <_free_r>
 800140e:	2300      	movs	r3, #0
 8001410:	6363      	str	r3, [r4, #52]	; 0x34
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001418:	81a3      	strh	r3, [r4, #12]
 800141a:	2300      	movs	r3, #0
 800141c:	6063      	str	r3, [r4, #4]
 800141e:	6923      	ldr	r3, [r4, #16]
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	81a3      	strh	r3, [r4, #12]
 800142a:	6923      	ldr	r3, [r4, #16]
 800142c:	b94b      	cbnz	r3, 8001442 <__swsetup_r+0x9a>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d003      	beq.n	8001442 <__swsetup_r+0x9a>
 800143a:	4621      	mov	r1, r4
 800143c:	4630      	mov	r0, r6
 800143e:	f000 f92b 	bl	8001698 <__smakebuf_r>
 8001442:	89a0      	ldrh	r0, [r4, #12]
 8001444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001448:	f010 0301 	ands.w	r3, r0, #1
 800144c:	d00a      	beq.n	8001464 <__swsetup_r+0xbc>
 800144e:	2300      	movs	r3, #0
 8001450:	60a3      	str	r3, [r4, #8]
 8001452:	6963      	ldr	r3, [r4, #20]
 8001454:	425b      	negs	r3, r3
 8001456:	61a3      	str	r3, [r4, #24]
 8001458:	6923      	ldr	r3, [r4, #16]
 800145a:	b943      	cbnz	r3, 800146e <__swsetup_r+0xc6>
 800145c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001460:	d1ba      	bne.n	80013d8 <__swsetup_r+0x30>
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	0781      	lsls	r1, r0, #30
 8001466:	bf58      	it	pl
 8001468:	6963      	ldrpl	r3, [r4, #20]
 800146a:	60a3      	str	r3, [r4, #8]
 800146c:	e7f4      	b.n	8001458 <__swsetup_r+0xb0>
 800146e:	2000      	movs	r0, #0
 8001470:	e7f7      	b.n	8001462 <__swsetup_r+0xba>
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	08001874 	.word	0x08001874
 800147c:	08001894 	.word	0x08001894
 8001480:	08001854 	.word	0x08001854

08001484 <_close_r>:
 8001484:	b538      	push	{r3, r4, r5, lr}
 8001486:	4d06      	ldr	r5, [pc, #24]	; (80014a0 <_close_r+0x1c>)
 8001488:	2300      	movs	r3, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	f7ff f979 	bl	8000786 <_close>
 8001494:	1c43      	adds	r3, r0, #1
 8001496:	d102      	bne.n	800149e <_close_r+0x1a>
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	b103      	cbz	r3, 800149e <_close_r+0x1a>
 800149c:	6023      	str	r3, [r4, #0]
 800149e:	bd38      	pop	{r3, r4, r5, pc}
 80014a0:	200000a0 	.word	0x200000a0

080014a4 <__sflush_r>:
 80014a4:	898a      	ldrh	r2, [r1, #12]
 80014a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014aa:	4605      	mov	r5, r0
 80014ac:	0710      	lsls	r0, r2, #28
 80014ae:	460c      	mov	r4, r1
 80014b0:	d458      	bmi.n	8001564 <__sflush_r+0xc0>
 80014b2:	684b      	ldr	r3, [r1, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dc05      	bgt.n	80014c4 <__sflush_r+0x20>
 80014b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dc02      	bgt.n	80014c4 <__sflush_r+0x20>
 80014be:	2000      	movs	r0, #0
 80014c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d0f9      	beq.n	80014be <__sflush_r+0x1a>
 80014ca:	2300      	movs	r3, #0
 80014cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014d0:	682f      	ldr	r7, [r5, #0]
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	d032      	beq.n	800153c <__sflush_r+0x98>
 80014d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	075a      	lsls	r2, r3, #29
 80014dc:	d505      	bpl.n	80014ea <__sflush_r+0x46>
 80014de:	6863      	ldr	r3, [r4, #4]
 80014e0:	1ac0      	subs	r0, r0, r3
 80014e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014e4:	b10b      	cbz	r3, 80014ea <__sflush_r+0x46>
 80014e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e8:	1ac0      	subs	r0, r0, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	4602      	mov	r2, r0
 80014ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014f0:	6a21      	ldr	r1, [r4, #32]
 80014f2:	4628      	mov	r0, r5
 80014f4:	47b0      	blx	r6
 80014f6:	1c43      	adds	r3, r0, #1
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	d106      	bne.n	800150a <__sflush_r+0x66>
 80014fc:	6829      	ldr	r1, [r5, #0]
 80014fe:	291d      	cmp	r1, #29
 8001500:	d82c      	bhi.n	800155c <__sflush_r+0xb8>
 8001502:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <__sflush_r+0x108>)
 8001504:	40ca      	lsrs	r2, r1
 8001506:	07d6      	lsls	r6, r2, #31
 8001508:	d528      	bpl.n	800155c <__sflush_r+0xb8>
 800150a:	2200      	movs	r2, #0
 800150c:	6062      	str	r2, [r4, #4]
 800150e:	04d9      	lsls	r1, r3, #19
 8001510:	6922      	ldr	r2, [r4, #16]
 8001512:	6022      	str	r2, [r4, #0]
 8001514:	d504      	bpl.n	8001520 <__sflush_r+0x7c>
 8001516:	1c42      	adds	r2, r0, #1
 8001518:	d101      	bne.n	800151e <__sflush_r+0x7a>
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	b903      	cbnz	r3, 8001520 <__sflush_r+0x7c>
 800151e:	6560      	str	r0, [r4, #84]	; 0x54
 8001520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001522:	602f      	str	r7, [r5, #0]
 8001524:	2900      	cmp	r1, #0
 8001526:	d0ca      	beq.n	80014be <__sflush_r+0x1a>
 8001528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800152c:	4299      	cmp	r1, r3
 800152e:	d002      	beq.n	8001536 <__sflush_r+0x92>
 8001530:	4628      	mov	r0, r5
 8001532:	f000 f8fd 	bl	8001730 <_free_r>
 8001536:	2000      	movs	r0, #0
 8001538:	6360      	str	r0, [r4, #52]	; 0x34
 800153a:	e7c1      	b.n	80014c0 <__sflush_r+0x1c>
 800153c:	6a21      	ldr	r1, [r4, #32]
 800153e:	2301      	movs	r3, #1
 8001540:	4628      	mov	r0, r5
 8001542:	47b0      	blx	r6
 8001544:	1c41      	adds	r1, r0, #1
 8001546:	d1c7      	bne.n	80014d8 <__sflush_r+0x34>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0c4      	beq.n	80014d8 <__sflush_r+0x34>
 800154e:	2b1d      	cmp	r3, #29
 8001550:	d001      	beq.n	8001556 <__sflush_r+0xb2>
 8001552:	2b16      	cmp	r3, #22
 8001554:	d101      	bne.n	800155a <__sflush_r+0xb6>
 8001556:	602f      	str	r7, [r5, #0]
 8001558:	e7b1      	b.n	80014be <__sflush_r+0x1a>
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	81a3      	strh	r3, [r4, #12]
 8001562:	e7ad      	b.n	80014c0 <__sflush_r+0x1c>
 8001564:	690f      	ldr	r7, [r1, #16]
 8001566:	2f00      	cmp	r7, #0
 8001568:	d0a9      	beq.n	80014be <__sflush_r+0x1a>
 800156a:	0793      	lsls	r3, r2, #30
 800156c:	680e      	ldr	r6, [r1, #0]
 800156e:	bf08      	it	eq
 8001570:	694b      	ldreq	r3, [r1, #20]
 8001572:	600f      	str	r7, [r1, #0]
 8001574:	bf18      	it	ne
 8001576:	2300      	movne	r3, #0
 8001578:	eba6 0807 	sub.w	r8, r6, r7
 800157c:	608b      	str	r3, [r1, #8]
 800157e:	f1b8 0f00 	cmp.w	r8, #0
 8001582:	dd9c      	ble.n	80014be <__sflush_r+0x1a>
 8001584:	6a21      	ldr	r1, [r4, #32]
 8001586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001588:	4643      	mov	r3, r8
 800158a:	463a      	mov	r2, r7
 800158c:	4628      	mov	r0, r5
 800158e:	47b0      	blx	r6
 8001590:	2800      	cmp	r0, #0
 8001592:	dc06      	bgt.n	80015a2 <__sflush_r+0xfe>
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159a:	81a3      	strh	r3, [r4, #12]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	e78e      	b.n	80014c0 <__sflush_r+0x1c>
 80015a2:	4407      	add	r7, r0
 80015a4:	eba8 0800 	sub.w	r8, r8, r0
 80015a8:	e7e9      	b.n	800157e <__sflush_r+0xda>
 80015aa:	bf00      	nop
 80015ac:	20400001 	.word	0x20400001

080015b0 <_fflush_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	690b      	ldr	r3, [r1, #16]
 80015b4:	4605      	mov	r5, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	b913      	cbnz	r3, 80015c0 <_fflush_r+0x10>
 80015ba:	2500      	movs	r5, #0
 80015bc:	4628      	mov	r0, r5
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	b118      	cbz	r0, 80015ca <_fflush_r+0x1a>
 80015c2:	6983      	ldr	r3, [r0, #24]
 80015c4:	b90b      	cbnz	r3, 80015ca <_fflush_r+0x1a>
 80015c6:	f7ff fa15 	bl	80009f4 <__sinit>
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <_fflush_r+0x6c>)
 80015cc:	429c      	cmp	r4, r3
 80015ce:	d11b      	bne.n	8001608 <_fflush_r+0x58>
 80015d0:	686c      	ldr	r4, [r5, #4]
 80015d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ef      	beq.n	80015ba <_fflush_r+0xa>
 80015da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015dc:	07d0      	lsls	r0, r2, #31
 80015de:	d404      	bmi.n	80015ea <_fflush_r+0x3a>
 80015e0:	0599      	lsls	r1, r3, #22
 80015e2:	d402      	bmi.n	80015ea <_fflush_r+0x3a>
 80015e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e6:	f7ff faa3 	bl	8000b30 <__retarget_lock_acquire_recursive>
 80015ea:	4628      	mov	r0, r5
 80015ec:	4621      	mov	r1, r4
 80015ee:	f7ff ff59 	bl	80014a4 <__sflush_r>
 80015f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015f4:	07da      	lsls	r2, r3, #31
 80015f6:	4605      	mov	r5, r0
 80015f8:	d4e0      	bmi.n	80015bc <_fflush_r+0xc>
 80015fa:	89a3      	ldrh	r3, [r4, #12]
 80015fc:	059b      	lsls	r3, r3, #22
 80015fe:	d4dd      	bmi.n	80015bc <_fflush_r+0xc>
 8001600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001602:	f7ff fa96 	bl	8000b32 <__retarget_lock_release_recursive>
 8001606:	e7d9      	b.n	80015bc <_fflush_r+0xc>
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <_fflush_r+0x70>)
 800160a:	429c      	cmp	r4, r3
 800160c:	d101      	bne.n	8001612 <_fflush_r+0x62>
 800160e:	68ac      	ldr	r4, [r5, #8]
 8001610:	e7df      	b.n	80015d2 <_fflush_r+0x22>
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <_fflush_r+0x74>)
 8001614:	429c      	cmp	r4, r3
 8001616:	bf08      	it	eq
 8001618:	68ec      	ldreq	r4, [r5, #12]
 800161a:	e7da      	b.n	80015d2 <_fflush_r+0x22>
 800161c:	08001874 	.word	0x08001874
 8001620:	08001894 	.word	0x08001894
 8001624:	08001854 	.word	0x08001854

08001628 <_lseek_r>:
 8001628:	b538      	push	{r3, r4, r5, lr}
 800162a:	4d07      	ldr	r5, [pc, #28]	; (8001648 <_lseek_r+0x20>)
 800162c:	4604      	mov	r4, r0
 800162e:	4608      	mov	r0, r1
 8001630:	4611      	mov	r1, r2
 8001632:	2200      	movs	r2, #0
 8001634:	602a      	str	r2, [r5, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	f7ff f8cc 	bl	80007d4 <_lseek>
 800163c:	1c43      	adds	r3, r0, #1
 800163e:	d102      	bne.n	8001646 <_lseek_r+0x1e>
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	b103      	cbz	r3, 8001646 <_lseek_r+0x1e>
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	bd38      	pop	{r3, r4, r5, pc}
 8001648:	200000a0 	.word	0x200000a0

0800164c <__swhatbuf_r>:
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	460e      	mov	r6, r1
 8001650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001654:	2900      	cmp	r1, #0
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	da08      	bge.n	8001670 <__swhatbuf_r+0x24>
 800165e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	602a      	str	r2, [r5, #0]
 8001666:	061a      	lsls	r2, r3, #24
 8001668:	d410      	bmi.n	800168c <__swhatbuf_r+0x40>
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	e00e      	b.n	800168e <__swhatbuf_r+0x42>
 8001670:	466a      	mov	r2, sp
 8001672:	f000 f8bb 	bl	80017ec <_fstat_r>
 8001676:	2800      	cmp	r0, #0
 8001678:	dbf1      	blt.n	800165e <__swhatbuf_r+0x12>
 800167a:	9a01      	ldr	r2, [sp, #4]
 800167c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001684:	425a      	negs	r2, r3
 8001686:	415a      	adcs	r2, r3
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	e7ee      	b.n	800166a <__swhatbuf_r+0x1e>
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	2000      	movs	r0, #0
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	b016      	add	sp, #88	; 0x58
 8001694:	bd70      	pop	{r4, r5, r6, pc}
	...

08001698 <__smakebuf_r>:
 8001698:	898b      	ldrh	r3, [r1, #12]
 800169a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800169c:	079d      	lsls	r5, r3, #30
 800169e:	4606      	mov	r6, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	d507      	bpl.n	80016b4 <__smakebuf_r+0x1c>
 80016a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	6123      	str	r3, [r4, #16]
 80016ac:	2301      	movs	r3, #1
 80016ae:	6163      	str	r3, [r4, #20]
 80016b0:	b002      	add	sp, #8
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	ab01      	add	r3, sp, #4
 80016b6:	466a      	mov	r2, sp
 80016b8:	f7ff ffc8 	bl	800164c <__swhatbuf_r>
 80016bc:	9900      	ldr	r1, [sp, #0]
 80016be:	4605      	mov	r5, r0
 80016c0:	4630      	mov	r0, r6
 80016c2:	f7ff fa57 	bl	8000b74 <_malloc_r>
 80016c6:	b948      	cbnz	r0, 80016dc <__smakebuf_r+0x44>
 80016c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016cc:	059a      	lsls	r2, r3, #22
 80016ce:	d4ef      	bmi.n	80016b0 <__smakebuf_r+0x18>
 80016d0:	f023 0303 	bic.w	r3, r3, #3
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	e7e3      	b.n	80016a4 <__smakebuf_r+0xc>
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <__smakebuf_r+0x7c>)
 80016de:	62b3      	str	r3, [r6, #40]	; 0x28
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	6020      	str	r0, [r4, #0]
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	81a3      	strh	r3, [r4, #12]
 80016ea:	9b00      	ldr	r3, [sp, #0]
 80016ec:	6163      	str	r3, [r4, #20]
 80016ee:	9b01      	ldr	r3, [sp, #4]
 80016f0:	6120      	str	r0, [r4, #16]
 80016f2:	b15b      	cbz	r3, 800170c <__smakebuf_r+0x74>
 80016f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016f8:	4630      	mov	r0, r6
 80016fa:	f000 f889 	bl	8001810 <_isatty_r>
 80016fe:	b128      	cbz	r0, 800170c <__smakebuf_r+0x74>
 8001700:	89a3      	ldrh	r3, [r4, #12]
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	81a3      	strh	r3, [r4, #12]
 800170c:	89a0      	ldrh	r0, [r4, #12]
 800170e:	4305      	orrs	r5, r0
 8001710:	81a5      	strh	r5, [r4, #12]
 8001712:	e7cd      	b.n	80016b0 <__smakebuf_r+0x18>
 8001714:	0800098d 	.word	0x0800098d

08001718 <__malloc_lock>:
 8001718:	4801      	ldr	r0, [pc, #4]	; (8001720 <__malloc_lock+0x8>)
 800171a:	f7ff ba09 	b.w	8000b30 <__retarget_lock_acquire_recursive>
 800171e:	bf00      	nop
 8001720:	20000094 	.word	0x20000094

08001724 <__malloc_unlock>:
 8001724:	4801      	ldr	r0, [pc, #4]	; (800172c <__malloc_unlock+0x8>)
 8001726:	f7ff ba04 	b.w	8000b32 <__retarget_lock_release_recursive>
 800172a:	bf00      	nop
 800172c:	20000094 	.word	0x20000094

08001730 <_free_r>:
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001732:	2900      	cmp	r1, #0
 8001734:	d044      	beq.n	80017c0 <_free_r+0x90>
 8001736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800173a:	9001      	str	r0, [sp, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f1a1 0404 	sub.w	r4, r1, #4
 8001742:	bfb8      	it	lt
 8001744:	18e4      	addlt	r4, r4, r3
 8001746:	f7ff ffe7 	bl	8001718 <__malloc_lock>
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <_free_r+0x94>)
 800174c:	9801      	ldr	r0, [sp, #4]
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	b933      	cbnz	r3, 8001760 <_free_r+0x30>
 8001752:	6063      	str	r3, [r4, #4]
 8001754:	6014      	str	r4, [r2, #0]
 8001756:	b003      	add	sp, #12
 8001758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800175c:	f7ff bfe2 	b.w	8001724 <__malloc_unlock>
 8001760:	42a3      	cmp	r3, r4
 8001762:	d908      	bls.n	8001776 <_free_r+0x46>
 8001764:	6825      	ldr	r5, [r4, #0]
 8001766:	1961      	adds	r1, r4, r5
 8001768:	428b      	cmp	r3, r1
 800176a:	bf01      	itttt	eq
 800176c:	6819      	ldreq	r1, [r3, #0]
 800176e:	685b      	ldreq	r3, [r3, #4]
 8001770:	1949      	addeq	r1, r1, r5
 8001772:	6021      	streq	r1, [r4, #0]
 8001774:	e7ed      	b.n	8001752 <_free_r+0x22>
 8001776:	461a      	mov	r2, r3
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b10b      	cbz	r3, 8001780 <_free_r+0x50>
 800177c:	42a3      	cmp	r3, r4
 800177e:	d9fa      	bls.n	8001776 <_free_r+0x46>
 8001780:	6811      	ldr	r1, [r2, #0]
 8001782:	1855      	adds	r5, r2, r1
 8001784:	42a5      	cmp	r5, r4
 8001786:	d10b      	bne.n	80017a0 <_free_r+0x70>
 8001788:	6824      	ldr	r4, [r4, #0]
 800178a:	4421      	add	r1, r4
 800178c:	1854      	adds	r4, r2, r1
 800178e:	42a3      	cmp	r3, r4
 8001790:	6011      	str	r1, [r2, #0]
 8001792:	d1e0      	bne.n	8001756 <_free_r+0x26>
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	6053      	str	r3, [r2, #4]
 800179a:	4421      	add	r1, r4
 800179c:	6011      	str	r1, [r2, #0]
 800179e:	e7da      	b.n	8001756 <_free_r+0x26>
 80017a0:	d902      	bls.n	80017a8 <_free_r+0x78>
 80017a2:	230c      	movs	r3, #12
 80017a4:	6003      	str	r3, [r0, #0]
 80017a6:	e7d6      	b.n	8001756 <_free_r+0x26>
 80017a8:	6825      	ldr	r5, [r4, #0]
 80017aa:	1961      	adds	r1, r4, r5
 80017ac:	428b      	cmp	r3, r1
 80017ae:	bf04      	itt	eq
 80017b0:	6819      	ldreq	r1, [r3, #0]
 80017b2:	685b      	ldreq	r3, [r3, #4]
 80017b4:	6063      	str	r3, [r4, #4]
 80017b6:	bf04      	itt	eq
 80017b8:	1949      	addeq	r1, r1, r5
 80017ba:	6021      	streq	r1, [r4, #0]
 80017bc:	6054      	str	r4, [r2, #4]
 80017be:	e7ca      	b.n	8001756 <_free_r+0x26>
 80017c0:	b003      	add	sp, #12
 80017c2:	bd30      	pop	{r4, r5, pc}
 80017c4:	20000098 	.word	0x20000098

080017c8 <_read_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d07      	ldr	r5, [pc, #28]	; (80017e8 <_read_r+0x20>)
 80017cc:	4604      	mov	r4, r0
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	602a      	str	r2, [r5, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f7fe ff9c 	bl	8000714 <_read>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_read_r+0x1e>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_read_r+0x1e>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200000a0 	.word	0x200000a0

080017ec <_fstat_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4d07      	ldr	r5, [pc, #28]	; (800180c <_fstat_r+0x20>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	602b      	str	r3, [r5, #0]
 80017fa:	f7fe ffd0 	bl	800079e <_fstat>
 80017fe:	1c43      	adds	r3, r0, #1
 8001800:	d102      	bne.n	8001808 <_fstat_r+0x1c>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	b103      	cbz	r3, 8001808 <_fstat_r+0x1c>
 8001806:	6023      	str	r3, [r4, #0]
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop
 800180c:	200000a0 	.word	0x200000a0

08001810 <_isatty_r>:
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	4d06      	ldr	r5, [pc, #24]	; (800182c <_isatty_r+0x1c>)
 8001814:	2300      	movs	r3, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	602b      	str	r3, [r5, #0]
 800181c:	f7fe ffcf 	bl	80007be <_isatty>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	d102      	bne.n	800182a <_isatty_r+0x1a>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	b103      	cbz	r3, 800182a <_isatty_r+0x1a>
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	bd38      	pop	{r3, r4, r5, pc}
 800182c:	200000a0 	.word	0x200000a0

08001830 <_init>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	bf00      	nop
 8001834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001836:	bc08      	pop	{r3}
 8001838:	469e      	mov	lr, r3
 800183a:	4770      	bx	lr

0800183c <_fini>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr
